#!/usr/bin/env python
########################################################################
##
## Copyright 2014 PMC-Sierra, Inc.
##
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License. You may
## obtain a copy of the License at
## http://www.apache.org/licenses/LICENSE-2.0 Unless required by
## applicable law or agreed to in writing, software distributed under the
## License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
## CONDITIONS OF ANY KIND, either express or implied. See the License for
## the specific language governing permissions and limitations under the
## License.
##
########################################################################

########################################################################
##
##   Author: Logan Gunthorpe
##
##   Date: Oct 23, 2014
##
##   Description:
##     This script recreates filesystems in psuedo-NVM devices that
##     loose their contents on reboots. (eg. pmem devices and mtramon
##     devices that do not have batteries.)
##
########################################################################


from __future__ import print_function

import os
import subprocess as sp
import glob
import shutil
import stat

def update_mounts():
    global mounts
    mounts = dict([(x.split()[0], x.split()[1]) for x in open("/proc/mounts")])
update_mounts()

def mknvfs(dev=None, uuid=None):
    if not dev: return
    if dev in mounts:
        print("%s already mounted." % dev)
        return

    if not os.path.exists(dev):
        print("%s does not exist." % dev)
        return

    try:
        old_uuid = sp.check_output(["blkid", dev])
    except sp.CalledProcessError:
        uuid = ["-U", uuid] if uuid else []

        try:
            print("Creating filesystem on %s" % dev)
            sp.check_call(["mkfs.ext4", dev] + uuid, stdout=open(os.devnull, "w"))
        except sp.CalledProcessError:
            print("Unable to create filesystem on %s" % dev)
            return

    try:
        print("Mounting %s" % dev)
        sp.check_call(["mount", dev])
        update_mounts()
    except sp.CalledProcessError:
        print("Unable to mount %s" % dev)
        return

    test_dat = os.path.join(mounts[dev], "test.dat")
    if not os.path.exists(test_dat):
        shutil.copy("/root/test.dat", test_dat)

        os.chmod(test_dat, (stat.S_IRUSR | stat.S_IWUSR |
                            stat.S_IRGRP | stat.S_IWGRP |
                            stat.S_IROTH | stat.S_IWOTH))

def find_nvme_from_dmi(*options):
    for o in options:
        g = glob.glob(os.path.join(o, "block", "nvme*"))
        if g:
            return os.path.join("/dev", os.path.basename(g[0]))
    return None

if __name__ == "__main__":
    mknvfs("/dev/pmem0")
    mknvfs("/dev/mtramonb1")
    mknvfs(find_nvme_from_dmi("/sys/block/mtramonb1/device",
                              "/sys/class/mtramon/mtramon1/device"),
           uuid="cca4ad99-6daa-4f78-b6b1-c2391badc072")
